/**
 * Knetik.io Data Collector REST API
 * <p>Use this API to send application data to Knetik.io including user/device information and transactional events.</p> <p>   Please consult the <a href=\"/doc\">official user documentation</a> to find out how to send data, and how this data is used. <p></p> <h2>Notes</h2> <br> New more ReSTful implementation of the telemetry data collection service. Legacy clients can still use the old API format, but we strongly recommend switching over to this new format. Navigate to the legacy documentation using the dropdown at the top of this page. <p></p> <h2>User IDs and Device IDs</h2> <br> Knetik.io can uniquely associate state, events and transactions to users and/or devices for your application. In order to accomplish this, each API call takes userId and deviceId as parameters in the request object. At least one of these must be provided in the request object, except as explicitly noted. <br> <p></p> <h2>Timestamps</h2> <br> All timestamp parameters must be epoch timestamps in milliseconds. <br> <p></p> <h2>Required Request Headers</h2> <br> The following HTTP header values must be provided for each API call: <ul>   <li>     <b>Content-Type: application/json</b>   </li> </ul> <p></p> <h2>Required Query Parameters</h2> <br> All API calls also require the following query parameters to be present on the URL: <ul>   <li>     <b>customer_id:</b> your unique customer ID   </li> </ul> <p></p> <h2>API Responses</h2> <br> If successful, API calls will simply return an HTTP response code of ACCEPTED (202) with no other data. If errors occur, a JSON payload will be returned containing detailed error information and an appropriate HTTP error status code will be provided (as documented in each of the API methods). <br> <p></p>
 *
 * OpenAPI spec version: 2.0
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchRequestResult', 'model/DataCollectorBaseRequest', 'model/DataCollectorBatchRequest', 'model/DataCollectorBeginTransactionRequest', 'model/DataCollectorEndTransactionRequest', 'model/DataCollectorNewDeviceRequest', 'model/DataCollectorNewUserRequest', 'model/DataCollectorTuneRequest', 'model/DataCollectorUpdateCollectionRequest', 'model/DataCollectorUpdateDeviceStateRequest', 'model/DataCollectorUpdateTransactionRequest', 'model/DataCollectorUpdateUserStateRequest', 'model/NewEventRequest', 'api/BatchApi', 'api/DebuggingApi', 'api/DevicesApi', 'api/EventsApi', 'api/MobileApplicationTrackingApi', 'api/TransactionsApi', 'api/UsersApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/BatchRequestResult'), require('./model/DataCollectorBaseRequest'), require('./model/DataCollectorBatchRequest'), require('./model/DataCollectorBeginTransactionRequest'), require('./model/DataCollectorEndTransactionRequest'), require('./model/DataCollectorNewDeviceRequest'), require('./model/DataCollectorNewUserRequest'), require('./model/DataCollectorTuneRequest'), require('./model/DataCollectorUpdateCollectionRequest'), require('./model/DataCollectorUpdateDeviceStateRequest'), require('./model/DataCollectorUpdateTransactionRequest'), require('./model/DataCollectorUpdateUserStateRequest'), require('./model/NewEventRequest'), require('./api/BatchApi'), require('./api/DebuggingApi'), require('./api/DevicesApi'), require('./api/EventsApi'), require('./api/MobileApplicationTrackingApi'), require('./api/TransactionsApi'), require('./api/UsersApi'));
  }
}(function(ApiClient, BatchRequestResult, DataCollectorBaseRequest, DataCollectorBatchRequest, DataCollectorBeginTransactionRequest, DataCollectorEndTransactionRequest, DataCollectorNewDeviceRequest, DataCollectorNewUserRequest, DataCollectorTuneRequest, DataCollectorUpdateCollectionRequest, DataCollectorUpdateDeviceStateRequest, DataCollectorUpdateTransactionRequest, DataCollectorUpdateUserStateRequest, NewEventRequest, BatchApi, DebuggingApi, DevicesApi, EventsApi, MobileApplicationTrackingApi, TransactionsApi, UsersApi) {
  'use strict';

  /**
   * Swagger CodeGen Autogenerated Javascript SDK for Knetik IO.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var KnetikIO = require('index'); // See note below*.
   * var xxxSvc = new KnetikIO.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new KnetikIO.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new KnetikIO.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new KnetikIO.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 3.0.7
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The BatchRequestResult model constructor.
     * @property {module:model/BatchRequestResult}
     */
    BatchRequestResult: BatchRequestResult,
    /**
     * The DataCollectorBaseRequest model constructor.
     * @property {module:model/DataCollectorBaseRequest}
     */
    DataCollectorBaseRequest: DataCollectorBaseRequest,
    /**
     * The DataCollectorBatchRequest model constructor.
     * @property {module:model/DataCollectorBatchRequest}
     */
    DataCollectorBatchRequest: DataCollectorBatchRequest,
    /**
     * The DataCollectorBeginTransactionRequest model constructor.
     * @property {module:model/DataCollectorBeginTransactionRequest}
     */
    DataCollectorBeginTransactionRequest: DataCollectorBeginTransactionRequest,
    /**
     * The DataCollectorEndTransactionRequest model constructor.
     * @property {module:model/DataCollectorEndTransactionRequest}
     */
    DataCollectorEndTransactionRequest: DataCollectorEndTransactionRequest,
    /**
     * The DataCollectorNewDeviceRequest model constructor.
     * @property {module:model/DataCollectorNewDeviceRequest}
     */
    DataCollectorNewDeviceRequest: DataCollectorNewDeviceRequest,
    /**
     * The DataCollectorNewUserRequest model constructor.
     * @property {module:model/DataCollectorNewUserRequest}
     */
    DataCollectorNewUserRequest: DataCollectorNewUserRequest,
    /**
     * The DataCollectorTuneRequest model constructor.
     * @property {module:model/DataCollectorTuneRequest}
     */
    DataCollectorTuneRequest: DataCollectorTuneRequest,
    /**
     * The DataCollectorUpdateCollectionRequest model constructor.
     * @property {module:model/DataCollectorUpdateCollectionRequest}
     */
    DataCollectorUpdateCollectionRequest: DataCollectorUpdateCollectionRequest,
    /**
     * The DataCollectorUpdateDeviceStateRequest model constructor.
     * @property {module:model/DataCollectorUpdateDeviceStateRequest}
     */
    DataCollectorUpdateDeviceStateRequest: DataCollectorUpdateDeviceStateRequest,
    /**
     * The DataCollectorUpdateTransactionRequest model constructor.
     * @property {module:model/DataCollectorUpdateTransactionRequest}
     */
    DataCollectorUpdateTransactionRequest: DataCollectorUpdateTransactionRequest,
    /**
     * The DataCollectorUpdateUserStateRequest model constructor.
     * @property {module:model/DataCollectorUpdateUserStateRequest}
     */
    DataCollectorUpdateUserStateRequest: DataCollectorUpdateUserStateRequest,
    /**
     * The NewEventRequest model constructor.
     * @property {module:model/NewEventRequest}
     */
    NewEventRequest: NewEventRequest,
    /**
     * The BatchApi service constructor.
     * @property {module:api/BatchApi}
     */
    BatchApi: BatchApi,
    /**
     * The DebuggingApi service constructor.
     * @property {module:api/DebuggingApi}
     */
    DebuggingApi: DebuggingApi,
    /**
     * The DevicesApi service constructor.
     * @property {module:api/DevicesApi}
     */
    DevicesApi: DevicesApi,
    /**
     * The EventsApi service constructor.
     * @property {module:api/EventsApi}
     */
    EventsApi: EventsApi,
    /**
     * The MobileApplicationTrackingApi service constructor.
     * @property {module:api/MobileApplicationTrackingApi}
     */
    MobileApplicationTrackingApi: MobileApplicationTrackingApi,
    /**
     * The TransactionsApi service constructor.
     * @property {module:api/TransactionsApi}
     */
    TransactionsApi: TransactionsApi,
    /**
     * The UsersApi service constructor.
     * @property {module:api/UsersApi}
     */
    UsersApi: UsersApi
  };

  return exports;
}));
